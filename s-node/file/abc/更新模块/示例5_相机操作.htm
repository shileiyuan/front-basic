<html>
<head>
    <meta name="GENERATOR" content="Microsoft Visual Studio 8.0">
    <title>相机参数</title>
    <script language="javascript" type="text/javascript">

        var MouseX = "";
        var MouseY = "";
        /**
         @brief 鼠标左键触发事件
         @param [in] x 鼠标点击位置x轴坐标
         @param [in] y 鼠标点击位置y轴坐标
        */
        function LButtonDown(x, y) {

           
            MouseX = x;
            MouseY = y;
            //window.alert("X: " + MouseX + "Y: " + MouseY);
        }
          /**
         @brief 操作事件
         @param [in] type   操作类型
         @param [in] result 操作结果
        */
        function FireOnOperationNotify(type, result)
        {
            window.alert( "ViewPoint: " + " type: " + type + " result: " + result ); 
        }

  
        var obj;
        var map;

        function InitScene() {
            obj = document.getElementById("VPSDKCtrl");
            obj.attachEvent("FireOnLButtonDown", LButtonDown);
            obj.attachEvent("FireOnOperationNotify", FireOnOperationNotify);

            map = obj.GetIMapMgrPtr();
			var ret = obj.InitLic("192.168.1.50@8088@");
        }

 

        var gmsLayer;
        //////加载模型数据
        function LoadGMS() {

            var tlo = map.CreateLayerOptions("HaiKang2_Compressed"); //给配置起个名称，必须和配置项Name的值一致    
            tlo.AddConfig("LayerOptionsName", "ModelLayerOptions"); // 创建配置类型, ModelLayerOptions代表模型数据配置，必须是此键值对
            tlo.AddConfig("Name", "HaiKang2_Compressed"); /////图层数据名称
            tlo.AddConfig("DataSourceTypeName", "gms"); // 数据源类型,代表GMS插件，必须是此键值对
            tlo.AddConfig("Url", "http://192.168.1.50:8088/files/"); /////要加载的数据路径，此数据需为GMS数据，只支持压缩数据
            gmsLayer = map.CreateLayer("ModelLayer", tlo); ////创建模型图层，第一项参数必须为ModelLayer
            map.AddLayer(gmsLayer); ///添加模型图层
            gmsLayer.Locate(); ////模型图层定位
        }

        ////删除模型数据
        function RemoveGMS() {
            map.RemoveLayer(gmsLayer); ////删除模型数据
        }


    
        var operationPtr;
        var isInit = false;
        function CreateUpdateOperation(){//创建更新操作
   
            var tlo = map.CreateOperationOptions("Camera"); //创建配置类型,操作类型的配置

            tlo.AddConfig("OptionsTypeName", "CameraOptions");
			tlo.AddConfig("Operation", "LodScale");//添加操作类型
             tlo.AddConfig("LodScale", 0.1);      //设置比例系数
            operationPtr = map.CreateOperation("CameraOperation", tlo); //根据配置创建模型调整操作
	        map.AddOperation(operationPtr);                                      //加入操作并执行

	    }


       

        function UpdateLodScale(){//更新光线参数

             var tlo = map.CreateOperationOptions("Camera"); //创建配置类型,操作类型的配置
             tlo.AddConfig("OptionsTypeName", "CameraOptions");
             tlo.AddConfig("Operation", "LodScale");//添加操作类型
             tlo.AddConfig("LodScale", 0.1);      //设置比例系数
             
             operationPtr.UpdateOperationOptions(tlo); //根据配置创建模型调整操作
        
        }


         function UpdateFovy(){//更新光线参数
             var tlo = map.CreateOperationOptions("Camera"); //创建配置类型,操作类型的配置
             tlo.AddConfig("OptionsTypeName", "CameraOptions");
             tlo.AddConfig("Operation", "Fovy"); //添加操作类型
             tlo.AddConfig("Fovy", 15);       //设置透视角
             
             operationPtr.UpdateOperationOptions(tlo); //根据配置创建模型调整操作
        
        }

       
        function UpdateSkyBoxImgPath() {//更新天空盒路径

             var tlo = map.CreateOperationOptions("Camera"); //创建配置类型,操作类型的配置
             tlo.AddConfig("OptionsTypeName", "CameraOptions");
             tlo.AddConfig("Operation", "SkyBoxImgPath"); //添加操作类型
             tlo.AddConfig("SkyBoxImgPath", "C:/Users/hsy/Desktop/Skybox/"); //设置天空盒和路径
             
             operationPtr.UpdateOperationOptions(tlo); //根据配置创建模型调整操作
        
        }

        function UpdateNearPlane() {//设置进平面

            var tlo = map.CreateOperationOptions("Camera"); //创建配置类型,操作类型的配置
            tlo.AddConfig("OptionsTypeName", "CameraOptions");
            tlo.AddConfig("Operation", " ZNear"); //添加操作类型
            tlo.AddConfig("ZNear", 0.1); //设置天空盒和路径

            operationPtr.UpdateOperationOptions(tlo); //根据配置创建模型调整操作

        }


	    function RemoveOperation() { //移除操作
	        map.RemoveOperation(operationPtr);
        }

    </script>
</head>
<body onload="InitScene()"> 
  
    <input id="Button17" type="button" value="加载(GMS)" onclick="LoadGMS()" />
    <input id="Button18" type="button" value="卸载(GMS)" onclick="RemoveGMS()" />

 
    <input id = "Button20" type = "button" value = "启动相机操作"   onclick = "CreateUpdateOperation()" />
    <input id = "Button21" type = "button" value = "视野距离设置"   onclick = "UpdateLodScale()"/>
    <input id = "Button22" type = "button" value = "透视角设置"     onclick = "UpdateFovy()">
    <input id = "Button23" type = "button" value = "天空盒路径设置" onclick = "UpdateSkyBoxImgPath()"/> 
    <input id = "Button24" type = "button" value = "近平面设置"     onclick = "UpdateNearPlane()"/>
    <input id = "Button25" type = "button" value = "移除操作"       onclick = "RemoveOperation()" />


    <object id="VPSDKCtrl" classid="CLSID:A1F1748A-2B6E-4616-954D-3F39B11DF57D" style="width: 100%;
        height: 100%">
    </object>
</body>
</html>
