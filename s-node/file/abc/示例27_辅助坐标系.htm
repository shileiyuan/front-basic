
<html>
<head>
    <title>6.0球面版本测试用例10_响应器</title>
	<script language="javascript" type="text/javascript" event="FireOnLButtonUp(tx,ty)"
        for="VPSDKCtrl">////此为鼠标左键弹起事件，返回屏幕坐标点
		if(addState)
		{
			pos = transformate.ScreenPosToWorldPos(tx, ty);////将屏幕坐标点转换成经纬度坐标
			alert("screen:" + tx + "," + ty + ";" + "position:" + pos.GetX() + "," + pos.GetY() + "," + pos.GetZ() + ";");
			addFeature.AddPoint(pos.GetX(), pos.GetY(), pos.GetZ() + 0.1);////向编辑图层添加坐标点信息
		}
    </script>
	<script language="javascript" type="text/javascript" event="FireOnResponserNotify(x , y)" for="VPSDKCtrl">
		//alert(1);
		{
			var xstr = resCross.GetResponserResult().GetConfigValueByKey("OXAngle");//红轴欧拉角
			var ystr = resCross.GetResponserResult().GetConfigValueByKey("OYAngle");//绿轴欧拉角
			var zstr = resCross.GetResponserResult().GetConfigValueByKey("OZAngle");//蓝轴欧拉角
			var pos = resCross.GetResponserResult().GetConfigValueByKey("LonLatPoint");//经纬度点坐标
			//alert("xAngle:" + xstr + " yAngle:" + ystr + " zAngle:" + zstr + "Point:" + pos);
		}
	</script>
    <script language="javascript" type="text/javascript">
		var polygoneditLayer;
		var addState = false;
		var map;
		var count = 0;
		var addFeature;
		var addFeature1;
		var nav;
		var pos;
        function InitScene() {
            obj = document.getElementById("VPSDKCtrl");
			map = obj.GetIMapMgrPtr();
			var ret = obj.InitLic("192.168.1.50@8088@");
			transformate = map.CreateTransformation();
			nav = map.CreateNavigation();
			//obj.attachEvent("FireOnResponserNotify", FireOnResponserNotify);
			//var resp = map.CreateResponserOptions("UICrossResponser");
            //var resCross = map.CreateResponser("UICrossResponser", resp); /////创建中心十字标响应器，必须为UICrossResponser
           // map.AddResponser(resCross);
			//LoadDOMMTDS();
        }
		var responseStr;
		function FireOnResponserNotify(x, y) {//拾取响应器触发
			responseStr = resCross.GetResponserResult().GetConfigValueByKey("PickPointList"); //获取经纬度列表
			//alert(responseStr);
		}
		//************************
		//要素编辑 以面符号化为例：
		//***********************	
		//创建要素
		function CreateFeature()
		{
			addFeature = map.CreateFeature();								//创建要素对象
			addFeature.SetGeometryType(1);									//设置要素几何类型(1:点; 2:线; 3:环; 4:面; 5:多结构)
			addFeature.SetComponentType(1);									//创建子几何类型（当GeometryType为5时生效）
			addState = true;
		}
	
		function AddPoint(){
			addFeature.AddPoint(120.215592164, 30.2108447285, 25.19);		//向编辑图层添加坐标点信息
		}
		//添加要素属性
		function AddAttribute() {
			addFeature.AddAttribute("ID", "axis", 5);						//添加属性值(1:int; 2:long; 3:float; 4:double; 5:string; 6:bool)
			addFeature.AddAttribute("XRotate", "0", 4);						//添加属性值
			addFeature.AddAttribute("YRotate", "0", 4);						//添加属性值
			addFeature.AddAttribute("ZRotate", "0", 4);						//添加属性值
		}
		
		//添加要素
		function AddFeature()
		{
			featureId = polygoneditLayer.GetMaxFeatureID();					//获取矢量图层要素最大ID
			addFeature.SetFeatureId(featureId + 1); 						//设置FeatureID
			polygoneditLayer.AddFeature(addFeature);						//添加到矢量图层
			addState = false;
		}
				
		//以矢量点数据为例：
		var modelshpLayer;
		var hAngle = 0;//此变量为视域体水平旋转角度，顺时针为正，逆时针为负，角度单位
		var vAngle = 0;//此变量为视域体垂直旋转角度，顺时针为负，逆时针为正，角度单位
		function LoadPointAndModel() {
			/////////////////////此部分是点在场景中显示的配置/////////////////
			var pSymbol = map.CreateSymbol("PointSymbol"); ////创建类型为PointSymbol的符号，必须为PointSymbol字符串
			pSymbol.AddConfig("Size", "5"); ////点大小，范围0-10
			pSymbol.AddConfig("Color", "1.0,1.0,0.0,1.0"); ////颜色值（RGBA）0-1，最后一位代表透明度，0为透明，1为不透
			/////////////////////此部分是点在场景中显示的配置/////////////////

			/////////////////////此部分是模型在场景中显示的配置/////////////////
			var tSymbol = map.CreateSymbol("ModelSymbol"); ////创建类型为ModelSymbol的符号，必须为ModelSymbol字符串
			tSymbol.AddConfig("Heading", "[ZRotate]"); ////蓝轴
			tSymbol.AddConfig("Pitch", "[YRotate]"); //////绿轴
			tSymbol.AddConfig("Roll", "[XRotate]"); ////红轴
			tSymbol.AddConfig("XScale", "1"); ////模型x方向放大比例
			tSymbol.AddConfig("YScale", "1"); ////模型y方向放大比例
			tSymbol.AddConfig("ZScale", "1"); ////模型z方向放大比例
			tSymbol.AddConfig("ModelOriginDir", "0,0,1"); ////模型原始轴向
			tSymbol.AddConfig("IsLocalRotation", "true");///进行编辑时需要设置为true
			tSymbol.AddConfig("FeatureLiftUp", "0"); 		//接地线抬升值(配置该项接地线将是文字到点之间，否则是文字、点到地底)
			tSymbol.AddConfig("LineColor", "1,1,1,1"); ////接地线颜色
			tSymbol.AddConfig("IsAddGroundLine", "false"); ////是否开启接地线
			tSymbol.AddConfig("Url", "http://192.168.1.50:8088/test/004.wrl"); ////模型资源路径
			tSymbol.AddConfig("LibraryName", "reslib"); ////资源名称

			var res = map.CreateResource("ModelSymbol"); ////创建模型资源，此处必须为ModelSymbol
			res.AddConfig("Uri", "http://192.168.1.50:8088/test/004.wrl"); ////图标资源路径
			var reslib = map.CreateResourceLibrary("reslib"); ////创建资源库，名称和图层配置LibraryName设置的名称对应
			reslib.AddResource(res); ////将资源添加至资源库
			/////////////////////此部分是模型在场景中显示的配置/////////////////

			var pStyle = map.CreateStyle("Point"); ////创建名称为Point的样式，名称任意
			pStyle.SetName("point"); ////设置别名point
			pStyle.AddSymbol("PointSymbol", pSymbol.GetConfig()); ////将点符号配置添加到该样式，第一参必须为PointSymbol字符串
			pStyle.AddFilterName("BuildGeometryFilter"); ////设置构建器符号为BuildGeometryFilter，必须为BuildGeometryFilter字符串
			pStyle.AddSymbol("ModelSymbol", tSymbol.GetConfig()); ////将模型符号配置添加到该样式，第一参必须为ModelSymbol字符串
			pStyle.AddFilterName("SubstituteModelFilter"); ////设置图片构建器符号为SubstituteModelFilter，此为图标符号化和模型符号化共有

			var styleSheet = map.CreateStyleSheet(); ////创建样式表
			styleSheet.AddStyle(pStyle.GetConfig()); ////将样式配置添加至样式表
			styleSheet.AddResLib(reslib.GetConfig()); ////将资源库添加至样式表

			var tlo = map.CreateLayerOptions("shp"); ////创建图层配置对象，名称任意
			tlo.AddConfig("LayerOptionsName", "FeatureModelLayerOptions"); ////创建配置类型, FeatureModelLayerOptions代表矢量数据配置，必须是此键值对
			tlo.AddConfig("DataSourceTypeName", "fmgeom"); ////数据源类型,代表fmgeom插件，必须是此键值对
			tlo.AddConfig("Driver", "ESRI Shapefile"); ////数据驱动，针对shp、dxf数据源必须是ESRI Shapefile
			tlo.AddConfig("Url", "F:\\axis.shp"); ////数据存放位置，注意双斜杠
			tlo.AddConfig("FeatureSourceType", "ogr"); ////要素数据源类型，针对shp、dxf数据源必须是ogr
			//tlo.AddConfig("Driver", "fmquadtree"); ////wfs数据驱动，针对shp、dxf数据源必须是ESRI Shapefile
			//tlo.AddConfig("Url", "http://192.168.1.50:8888/geoserver/kelanData/ows"); ////数据存放位置，此为网络路径，在浏览器中查看，
		   // tlo.AddConfig("FeatureSourceType", "wfs"); ////要素数据源类型，针对wfs数据源wfs
		   // tlo.AddConfig("LayerName", "kelanData:extrudePoint"); ////wfs图层名称，可通过图层信息获取接口获得到
			tlo.AddConfig("BuildSpatialIndex","true");///< 是否对读入的shp数据创建空间索引
			tlo.AddConfig("TileSizeFactor", "1.0"); ////瓦片大小的影响因子，建议是1.0
			tlo.AddConfig("TileSize", "1000"); ////瓦片大小，根据数据实际情况设置，根据数据面积来，面积越大值越大
			tlo.AddConfig("LiftUp", "0"); ////抬升高度，任意值
			tlo.AddConfig("MaxRange", "10000000.0"); ////最大显示范围，大于最小显示范围-无穷大
			tlo.AddConfig("MinRange", "0.0"); ////最小显示范围，0-无穷大
			tlo.AddConfig("Fields", "ID:String:100:0,XRotate:Double:100:3,YRotate:Double:100:3,ZRotate:Double:100:3");

			tlo.AddConfig("UseCache", "false");
			tlo.AddConfig("CachePath", "D:\\ProgramData\\ldb\\WFS");
			tlo.AddConfig("LimitSize", "1024");
			tlo.AddConfig("SizeCheckPeriod", "100");
			tlo.AddConfig("SizePurgePeriod", "75");
			tlo.AddConfig("WriteBufferSize", "4 *1024 * 1024");
			tlo.AddConfig("MaxOpenFiles", "1000");
			tlo.AddConfig("BlockSize","1024 * 1024");
				
			tlo.AddConfig("StyleSheet", styleSheet.GetConfig()); ////将样式表配置添加至图层配置对象，第一参必须为StyleSheet字符串

			modelshpLayer = map.CreateLayer("FeatureModelLayer", tlo); ////创建矢量图层，第一项参数必须为FeatureModelLayer
			map.AddLayer(modelshpLayer); ////添加矢量图层
			//modelshpLayer.Locate(); ////矢量图层定位（不建议，不精准）
			var id = modelshpLayer.GetLayerID(); ////获取图层id
			polygoneditLayer = map.GetFeatureModelLayer(id); ////获取矢量图层
		}
		
		//保存矢量图层
		function ShpSave(){
			var state = polygoneditLayer.SaveLayer();
			alert(state);
		}
		
		//添加Axis响应器
		var resAxis;
        function AddResAxis() {													//右手坐标系建轴
            var resp = map.CreateResponserOptions("AxisEditResponser");
			resp.AddConfig("PickLayerIdList", modelshpLayer.GetLayerID());
			resp.AddConfig("PickColor", "1.0,1.0,0,0.01");					    //拾取颜色r g b a
			resp.AddConfig("IsChangeColor", "true");						    //是否变色
			resp.AddConfig("AxisXVisible", "true");								//x旋转面是否显示（红面）
			resp.AddConfig("AxisYVisible", "true");								//y旋转面是否显示（绿面）
			resp.AddConfig("AxisZVisible", "true");								//z旋转面是否显示（蓝面）
			resp.AddConfig("XRotate", "XRotate");								//x轴关联字段（红轴）
			resp.AddConfig("YRotate", "YRotate");								//y轴关联字段（绿轴）
			resp.AddConfig("ZRotate", "ZRotate");								//z轴关联字段（蓝轴）
			resp.AddConfig("Adjustment", "0.1");								//微调部件步进值，默认为0.01
			resp.AddConfig("DragSpeed", "10");									//拖拽速度系数，默认为1
            resCross = map.CreateResponser("AxisEditResponser", resp); 			//坐标轴响应器，必须为AxisEditResponser
            resCross.AddObserver();
			map.AddResponser(resCross);
        }
		
		//移除Axis响应器
        function RemoveResAxis() {
            map.RemoveResponser("AxisEditResponser"); 							//移除辅助坐标系响应器，必须为AxisEditResponser
        }
		
		
		//获取结果
		function GetResult(){
			var ID = resCross.GetResponserResult().GetConfigValueByKey("id");	//获取经纬度坐标值
			var xstr = resCross.GetResponserResult().GetConfigValueByKey("OXAngle");	//获取绕x轴旋转弧度
			var ystr = resCross.GetResponserResult().GetConfigValueByKey("OYAngle");	//获取绕y轴旋转弧度
			var zstr = resCross.GetResponserResult().GetConfigValueByKey("OZAngle");	//获取绕z轴旋转弧度
			var pos = resCross.GetResponserResult().GetConfigValueByKey("LonLatPoint");	//获取经纬度坐标值
			alert("id:" + ID + " xAngle:" + xstr + " yAngle:" + ystr + " zAngle:" + zstr + "Point:" + pos);
		}
    		
		var gmsLayer;
        //加载模型数据
        function LoadGMS() {
            var tlo = map.CreateLayerOptions("test"); //给配置起个名称，必须和配置项Name的值一致    
            tlo.AddConfig("LayerOptionsName", "ModelLayerOptions"); // 创建配置类型, ModelLayerOptions代表模型数据配置，必须是此键值对
            tlo.AddConfig("Name", "HaiKang2_Compressed"); /////图层数据名称
            tlo.AddConfig("DataSourceTypeName", "gms"); // 数据源类型,代表GMS插件，必须是此键值对
            tlo.AddConfig("Url", "http://192.168.1.50:8088/files/"); /////要加载的数据路径，此数据需为GMS数据，只支持压缩数据
			//调度优先级 = priority * PriorityScale + PriorityOffset;
			//其中priority由vp根据PagedNode结点的范围(minExtent, maxExtent)、其距离视点的距离、LOD层级mLODScale计算得到
			//调度优先级越大，优先调度并显示
			tlo.AddConfig("PriorityScale","1.0");// 结点调度优先级的缩放值PriorityScale,
			tlo.AddConfig("PriorityOffset","1.0");// 结点调度优先级的偏移值PriorityOffset,
			
			tlo.AddConfig("UseCache", "true");
			tlo.AddConfig("CachePath", "D:\\ProgramData\\ldb\\GMS");
			tlo.AddConfig("LimitSize", "1024");
			tlo.AddConfig("SizeCheckPeriod", "100");
			tlo.AddConfig("SizePurgePeriod", "75");
			tlo.AddConfig("WriteBufferSize", "4 *1024 * 1024");
			tlo.AddConfig("MaxOpenFiles", "1000");
			tlo.AddConfig("BlockSize","1024 * 1024");
			
            gmsLayer = map.CreateLayer("ModelLayer", tlo); //创建模型图层，第一项参数必须为ModelLayer
            map.AddLayer(gmsLayer); ///添加模型图层
            gmsLayer.Locate(); ////模型图层定位
        }
		
        //删除模型数据
        function RemoveGMS() {
            map.RemoveLayer(gmsLayer); ////删除模型数据
        }
		var mtdsdomlayer;
		//////加载DOM数据
		function LoadDOMMTDS() {
			var tlo = map.CreateLayerOptions("domlayer"); 	// 创建dom图层，给配置起个名称，任意名称
			tlo.AddConfig("LayerOptionsName", "ImageLayerOptions"); // 创建配置类型, ImageLayerOptions代表影像数据配置，必须是此键值对
			tlo.AddConfig("DataSourceTypeName", "mtds"); // 数据源类型,代表MTDS插件，必须是此键值对
			tlo.AddConfig("Driver", "terrainquadtree"); // 代表地形驱动，必须是此键值对

			//////////////以下部分可以通过图层信息获取获得相应的配置////////////
			tlo.AddConfig("Url", "http://192.168.1.50:8088/files/HZDOM"); /////要加载的数据路径，此数据必须是通过MTD切割工具生成的数据，并且进行了网络发布
			tlo.AddConfig("Format", "png"); ///////切割形成的数据格式
			tlo.AddConfig("Srs", "EPSG:4326"); /////数据的坐标参考
			tlo.AddConfig("MaxX", " 120.714010586176"); /////数据的范围X向最大值
			tlo.AddConfig("MinX", " 118.339686018686"); /////数据的范围X向最小值
			tlo.AddConfig("MaxY", " 30.5651224875501"); ////数据的范围Y向最大值
			tlo.AddConfig("MinY", " 29.188584444612"); /////数据的范围Y向最小值
			tlo.AddConfig("TileSize", "256"); /////切割数据的瓦片大小，可以往小于256的方向设置，但绝对不能往大于256的方向设置，但最好用切割的大小设置，否则会影响效率
			tlo.AddConfig("MinLevel", "0"); /////数据显示的最小层级
			tlo.AddConfig("MaxLevel", "16"); /////数据显示的最大层级

			tlo.AddConfig("UseCache", "true");
			tlo.AddConfig("CachePath", "D:\\ProgramData\\ldb\\Terrain");
			tlo.AddConfig("LimitSize", "1024");
			tlo.AddConfig("SizeCheckPeriod", "100");
			tlo.AddConfig("SizePurgePeriod", "75");
			tlo.AddConfig("WriteBufferSize", "4 *1024 * 1024");
			tlo.AddConfig("MaxOpenFiles", "1000");
			tlo.AddConfig("BlockSize","1024 * 1024");
				
			mtdsdomlayer = map.CreateLayer("ImageLayer", tlo); ////创建DEM图层，第一项参数必须为ImageLayer
			map.AddLayer(mtdsdomlayer); ///添加DOM图层
			//mtdsdomlayer.Locate(); ////DOM图层定位
		}
		
	</script>
</head>
<body onload="InitScene()">
	<input id="Button16" type="button" value="加载模型" onclick="LoadGMS()" />
	<input id="Button16" type="button" value="删除模型" onclick="RemoveGMS()" />
	<input id="Button16" type="button" value="加载编辑图层" onclick="LoadPointAndModel()" />
	<input id="Button16" type="button" value="创建要素" onclick="CreateFeature()" />
	<input id="Button16" type="button" value="添加坐标信息" onclick="AddPoint()" />
    <input id="Button20" type="button" value="添加属性信息" onclick="AddAttribute()" />
    <input id="Button19" type="button" value="添加要素" onclick="AddFeature()" />
	<input id="Button18" type="button" value="添加Axis响应器" onclick="AddResAxis()" />
    <input id="Button19" type="button" value="卸载Axis响应器" onclick="RemoveResAxis()" />
	<input id="Button19" type="button" value="矢量保存" onclick="ShpSave()" />
	<input id="Button19" type="button" value="获取结果" onclick="GetResult()" />
    <object id="VPSDKCtrl" classid="CLSID:A1F1748A-2B6E-4616-954D-3F39B11DF57D" style="width:100%;
        height:100%">
    </object>
</body>
</html>
