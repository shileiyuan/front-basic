<html>
<head>
    <meta name="GENERATOR" content="Microsoft Visual Studio 8.0">
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>6.0示例20_SDK工具类</title>
	<script language="javascript" type="text/javascript" event="FireOnLButtonDown(x , y)" for="VPSDKCtrl">
	if(ss)
	{
		llhpos = transformate.ScreenPosToWorldPos(x, y);////将屏幕坐标点转换成经纬度坐标
        //var pos = transformate.ConvertLongLatHeightToXYZ(position)
		//alert("x: " + x + " y : " +y);
		//alert("x: " + llhpos.GetX() + " y : " +llhpos.GetY() + "  z: " +llhpos.GetZ());
		ss = false;
		showWegdit();
	}
	</script>
	
	<script language="javascript" type="text/javascript" event="FireOnToolsNotify(tx,ty)" for="VPSDKCtrl">////响应器返回事件
		var param = webobject.GetToolsResult().GetConfigValueByKey("Param");
		if(param == "123") {
			alert(param);
		}
		if(param == "456") {
			alert(param);
			HideWebDialog();
		}
		
	</script>
	
	<script language="javascript" type="text/javascript" event="FireOnResponserNotify(tx,ty)" for="VPSDKCtrl">////响应器返回事件
	if(ty == 0)
	{
		var param = webResp.GetResponserResult().GetConfigValueByKey("Param");
		if(param == "123") {
			alert(param);
		}
		if(param == "456") {
			alert(param);
			RemoveWegdit();
		}
		if(param == "Close") {
			RemoveWegdit();
		}
	}
	else if(ty == 1)
	{
		alert(tx + ty);
	}
	</script>
	
    <script language="javascript" type="text/javascript">
	
	console.log(window.location);

        var obj;
        var map;
		var tools;
		var pos;
		var state = false;
		var llhpos;

        function InitScene() {
            obj = document.getElementById("VPSDKCtrl");
            map = obj.GetIMapMgrPtr();
			var ret = obj.InitLic("192.168.1.50@8088@");
			tools = obj.GetIToolsCOMPtr();
			transformate = map.CreateTransformation();
        }
		
		function loadData() {
			//////////////地形影像数据////////////
            var tlo = map.CreateLayerOptions("domlayer"); 										///< 创建dom图层，给配置起个名称，任意名称
            tlo.AddConfig("LayerOptionsName", "ImageLayerOptions"); 							///< 创建配置类型, ImageLayerOptions代表影像数据配置，必须是此键值对
            tlo.AddConfig("DataSourceTypeName", "mtds"); 										///< 数据源类型,代表MTDS插件，必须是此键值对
            tlo.AddConfig("Driver", "terrainquadtree"); 										///< 代表地形驱动，必须是此键值对
            tlo.AddConfig("Url", "http://192.168.1.50:8088/files/HZDOM/"); 						///< 要加载的数据路径，此数据必须是通过MTD切割工具生成的数据，并且进行了网络发布
            tlo.AddConfig("Format", "png"); 													///< 切割形成的数据格式
            tlo.AddConfig("Srs", "EPSG:4326"); 													///< 数据的坐标参考
            tlo.AddConfig("MaxX", " 120.714010586176"); 										///< 数据的范围X向最大值
            tlo.AddConfig("MinX", " 118.339686018686"); 										///< 数据的范围X向最小值
            tlo.AddConfig("MaxY", " 30.5651224875501"); 										///< 数据的范围Y向最大值
            tlo.AddConfig("MinY", " 29.188584444612"); 											///< 数据的范围Y向最小值
            tlo.AddConfig("TileSize", "256"); 													///< 切割数据的瓦片大小
            tlo.AddConfig("MinLevel", "0");														///< 数据显示的最小层级
            tlo.AddConfig("MaxLevel", "16"); 													///< 数据显示的最大层级

            mtdsdomlayer = map.CreateLayer("ImageLayer", tlo); 									///< 创建DEM图层，第一项参数必须为ImageLayer
            map.AddLayer(mtdsdomlayer); 														///< 添加DOM图层
			
			//////////////模型数据////////////
			var tlo = map.CreateLayerOptions("HaiKang2_Compressed"); 							///< 给配置起个名称，必须和配置项Name的值一致    
            tlo.AddConfig("LayerOptionsName", "ModelLayerOptions"); 							///< 创建配置类型, ModelLayerOptions代表模型数据配置，必须是此键值对
            tlo.AddConfig("Name", "HaiKang2_Compressed"); 										///< 图层数据名称
            tlo.AddConfig("DataSourceTypeName", "gms"); 										///< 数据源类型,代表GMS插件，必须是此键值对
            tlo.AddConfig("Url", "http://192.168.1.50:8088/files/"); 							///< 要加载的数据路径，此数据需为GMS数据，只支持压缩数据
            gmsLayer = map.CreateLayer("ModelLayer", tlo); 										///< 建模型图层，第一项参数必须为ModelLayer
            map.AddLayer(gmsLayer); 															///< 添加模型图层
			gmsLayer.Locate();																	///< 图层定位
        }
		
		var webobject;
		function ShowWebDialog() 
		{
            var opt = tools.CreateToolsOptions("web");											///< 创建配置项
			opt.AddConfig("Url", "G:\\试用平台及用例\\SDK.v6.1.13\\test\\示例9_特效.html?'haha'");		///< 网页链接地址
			opt.AddConfig("Left", "100");														///< 屏幕位置x
			opt.AddConfig("Top", "200");														///< 屏幕位置y
			opt.AddConfig("Widget", "350");														///< 页面宽度
			opt.AddConfig("Height", "500");														///< 页面高度		
			opt.AddConfig("Alpha", "200");														///< 窗口透明度
			webobject = tools.CreateToolsObject("WebInfoTool" , opt);							///< 创建工具类型
			webobject.AddObserver();
			webobject.Active();		
				console.log(window.location);
			///< 激活工具类
        }
		
		function HideWebDialog() 
		{
			//webobject.Deactive();																///< 移除网页弹窗界面
			tools.DestoryTools(webobject);
			webobject = null;
        }
		
		function UpdateWebDialog() 
		{
			var opt = tools.CreateToolsOptions("web");											///< 创建配置项
			opt.AddConfig("FunctionName", "Test");														///< 页面宽度
			opt.AddConfig("FunctionParam", "320");														///< 页面高度		
			webobject.UpdateToolsOption(opt);
        }
		
		var webResp = null;
		function showWegdit() {
			if(webResp)
			{
				map.RemoveResponser("TipsDialogResponser");											///< 移除响应器
				webResp = null;
			}
			else{
				var dataPath = obj.GetSDKPath().substring(0, 53) + "data\\texture\\close.bmp";		///< 关闭按钮图片路径
				
				var pOption = map.CreateResponserOptions("123");									///< 创建响应器配置项
				pOption.AddConfig("Longitude", llhpos.GetX());										///< 指向经纬度坐标经度
				pOption.AddConfig("Latitude", llhpos.GetY());										///< 指向经纬度坐标维度
				pOption.AddConfig("PosHeight", llhpos.GetZ());										///< 指向经纬度坐标高度
				pOption.AddConfig("ShowDistance", "200000");											///< 最大显示垂直距离
				pOption.AddConfig("Widget", "395");													///< 窗口宽度
				pOption.AddConfig("Height", "240");													///< 窗口高度
				pOption.AddConfig("ArrowSize", "30");												///< 箭头大小
				pOption.AddConfig("Radial", "20");													///< 圆角直径
				pOption.AddConfig("Url", "F:\\CooGisSDK6.0\\Code\\test\\javascript\\test.htm");	///< 指向网页url
				pOption.AddConfig("MoveDelay", "1");												///< 坐标更新帧率
				pOption.AddConfig("CloseButtonState", "true");										///< 是否显示关闭按钮
				pOption.AddConfig("CloseButtonUrl", dataPath);										///< 关闭按钮图片路径
				pOption.AddConfig("BKColor", "65,177,255,150");											///< 箭头背景颜色
				
				pOption.AddConfig("CloseBtnPosX", "365");											///< 关闭按钮所在窗口x位置
				pOption.AddConfig("CloseBtnPosY", "10");											///< 关闭按钮所在窗口y位置
				pOption.AddConfig("CloseBtnPosW", "20");											///< 关闭按钮宽度
				pOption.AddConfig("CloseBtnPosH", "20");											///< 关闭按钮高度
				pOption.AddConfig("FunctionName", "Test");											///< 函数名
				pOption.AddConfig("FunctionParam", "20");											///< 函数参数
				
				webResp  = map.CreateResponser("TipsDialogResponser", pOption);						///< 创建响应器
				webResp.AddObserver();
				map.AddResponser(webResp);															///< 响应器添加至场景
			}
        }
		
		function RemoveWegdit() {
			map.RemoveResponser("TipsDialogResponser");												///< 移除响应器
			webResp = null;
        }
		
		var state = false;
		function UpdateWegdit() 
		{
			var pOption = map.CreateResponserOptions("123");										///< 创建响应器配置项
			pOption.AddConfig("Url", "http://192.168.1.50:8088/test/viewpoint.htm");											///< 配置响应器显隐状态
			webResp.UpdateResponserOptions(pOption);												///< 更新相应器操作
        }
		
		function VisibleWegdit() 
		{
			var pOption = map.CreateResponserOptions("123");										///< 创建响应器配置项
			pOption.AddConfig("Visible", state ? 1 : 0);											///< 配置响应器显隐状态
			webResp.UpdateResponserOptions(pOption);												///< 更新相应器操作
			state = !state;
        }
		
		var ss;
		function trans() {
			ss = true;
		}
		
		function onloadl() {
			var pOption = map.CreateResponserOptions("123");									///< 创建响应器配置项
			pOption.AddConfig("FunctionName", "Test");											///< 函数名
			pOption.AddConfig("FunctionParam", "20");											///< 函数参数
			webResp.UpdateResponserOptions(pOption);						///< 创建响应器
		}

    </script>
</head>
<body onload="InitScene()">
	<input type="button" value="加载数据" onclick="loadData()" />
    <input type="button" value="创建网页弹出界面" onclick = "ShowWebDialog()" />
	<input type="button" value="移除网页弹出界面" onclick = "HideWebDialog()" />
	<input type="button" value="更新网页弹出界面" onclick = "UpdateWebDialog()" />
	<input type="button" value="弹出动态窗口" onclick="trans()" />
	<input type="button" value="销毁动态窗口" onclick="RemoveWegdit()" />
	<input type="button" value="显隐动态窗口" onclick="VisibleWegdit()" />
	<input type="button" value="更新动态窗口" onclick="UpdateWegdit()" />
	<input type="button" value="参数" onclick="onloadl()" />
    <object id="VPSDKCtrl" classid="CLSID:A1F1748A-2B6E-4616-954D-3F39B11DF57D" style="width: 100%; height: 940px"> </object>
</body>
</html>
