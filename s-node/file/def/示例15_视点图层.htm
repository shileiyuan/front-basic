<html>
<head>
    <meta name="GENERATOR" content="Microsoft Visual Studio 8.0">
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=8">
    <title>6.0球面版本测试用类视点图层</title>
	<script language="javascript" type="text/javascript" event="FireOnResponserNotify(x , y)" for="VPSDKCtrl">
		//alert(1);
		var str = res.GetResponserResult().GetConfigValueByKey("PickPointList");
		alert(str);
	</script>
	
    <script language="javascript" type="text/javascript">

        var obj;
        var map;

        function InitScene() {
            obj = document.getElementById("VPSDKCtrl");
            map = obj.GetIMapMgrPtr();
			var ret = obj.InitLic("192.168.1.50@8088@");
        }

		//创建视点图层
        var viewPointLayer;
        function CreateViewPointLayer() {
            var tlo = map.CreateLayerOptions("ViewPointLayer");

            tlo.AddConfig("LayerOptionsName", "ViewPointLayerOptions"); //创建配置类型, ModelLayerOptions代表模型数据配置，必须是此键值对
            tlo.AddConfig("Auto", 1);                                   //以当前视点作为定位数据，若为0需要手动指定数据
            /**
             * @brief 以下注释代码，为手动设置视点图层数据，即Auto设置为0时，手动录入参数
             *
             * tlo.AddConfig("Pitch",mPitch);        俯仰角设置
             * tlo.AddConfig("Azimuth", mAzimuth);   方位角设置
			 * tlo.AddConfig("Range", mRange);       距离设置
			 * tlo.AddConfig("WorldPos", "x,y,z");   视点设置，为经纬度坐标
             * tlo.AddConfig("ImageUrl", mImageUrl); 图片设置，暂未用到
             * 
             */  
              
            viewPointLayer = map.CreateLayer("ViewPointLayer", tlo);
            map.AddLayer(viewPointLayer);
        }
		
		//更新视点图层
		function UpdateViewPointLayer()
		{
			if( null != viewPointLayer )
			{
			    var tlo = map.CreateLayerOptions("ViewPointLayer");
                tlo.AddConfig("LayerOptionsName", "ViewPointLayerOptions"); // 创建配置类型, ModelLayerOptions代表模型数据配置，必须是此键值对
                tlo.AddConfig("Auto", "0");                                   // 以当前视点作为定位数据，若为0需要手动指定数据    
                tlo.AddConfig("Pitch","3.14");       
                tlo.AddConfig("Azimuth", "3.14");   
			    tlo.AddConfig("Range", "10");      
			    tlo.AddConfig("WorldPos", "120,30,110");   
               
                viewPointLayer.UpdateLayerOptions(tlo);
            
			}
		}

        //序列化视点图层
        function SerialViewPointLayer() {
            if (viewPointLayer != null) {
                viewPointLayer.SerializeLayer("D:\\ViewPoint.xml");
            }
        }

        function LocateViewPointLayer() {
            if ( viewPointLayer != null ) {
                viewPointLayer.Locate();  //定位视点图层
            }
        }

        function RemoveViewPointLayer() {
            if (viewPointLayer != null) {
                map.RemoveLayer(viewPointLayer);  //移除视点图层
                viewPointLayer = null;
            }
        }

        function DeserialViewPointLayer(){
            viewPointLayer = map.DeserializeLayer("D:\\ViewPoint.xml");
        }
  
        var gmsLayer;
        //加载模型数据
        function LoadGMS() {
            var tlo = map.CreateLayerOptions("test"); //给配置起个名称，必须和配置项Name的值一致    
			tlo.AddConfig("LayerOptionsName", "ModelLayerOptions"); // 创建配置类型, ModelLayerOptions代表模型数据配置，必须是此键值对
			tlo.AddConfig("Name", "HaiKang2_Compressed"); /////图层数据名称
			tlo.AddConfig("DataSourceTypeName", "gms"); // 数据源类型,代表GMS插件，必须是此键值对
			tlo.AddConfig("Url", "http://192.168.1.50:8088/files/"); /////要加载的数据路径，此数据需为GMS数据，只支持压缩数据
			//调度优先级 = priority * PriorityScale + PriorityOffset;
			//其中priority由vp根据PagedNode结点的范围(minExtent, maxExtent)、其距离视点的距离、LOD层级mLODScale计算得到
			//调度优先级越大，优先调度并显示
			tlo.AddConfig("PriorityScale","1.0");// 结点调度优先级的缩放值PriorityScale,
			tlo.AddConfig("PriorityOffset","1.0");// 结点调度优先级的偏移值PriorityOffset,
			gmsLayer = map.CreateLayer("ModelLayer", tlo); //创建模型图层，第一项参数必须为ModelLayer
			map.AddLayer(gmsLayer); ///添加模型图层
			gmsLayer.Locate(); ////模型图层定位
        }

        //删除模型数据
        function RemoveGMS() {
            map.RemoveLayer(gmsLayer); //删除模型数据
        }

        //显隐模型数据
        var GMSVisble = true;
        function VisibleGMS() {
            if (GMSVisble) {
                GMSVisble = false;
            } else {
                GMSVisble = true;
            }
            gmsLayer.SetVisible(GMSVisble); //显隐模型数据
        }
    </script>
</head>
<body onload="InitScene()">
    <input id="Button1" type="button" value="加载GMS" onclick="LoadGMS()" />
    <input id="Button4" type="button" value="卸载GMS" onclick="RemoveGMS()" />
    <input id="Button5" type="button" value="显隐GMS" onclick="VisibleGMS()" />
	&nbsp;
    <input id="Button6" type="button" value="创建视点图层" onclick="CreateViewPointLayer()" />
    <input id="Button7" type="button" value="更新视点图层" onclick="UpdateViewPointLayer()" />
    <input id="Button7" type="button" value="定位视点图层" onclick="LocateViewPointLayer()" />
    <input id="Button8" type="button" value="序列化视点图层" onclick="SerialViewPointLayer()" />
    <input id="Button9" type ="button"value="反序列花图层"   onclick = "DeserialViewPointLayer()" />
    <input id="Button10" type="button" value="移除视点图层" onclick="RemoveViewPointLayer()" />
    <object id="VPSDKCtrl" classid="CLSID:A1F1748A-2B6E-4616-954D-3F39B11DF57D" style="width: 100%; height: 980px">
    </object>
</body>
</html>
