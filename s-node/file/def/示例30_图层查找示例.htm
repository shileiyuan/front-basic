<html>
<head>
    <meta name="GENERATOR" content="Microsoft Visual Studio 8.0">
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=8">
    <title>区域压平示例</title>
	<!--<script language="javascript" type="text/javascript" event="FireOnLButtonUp(x , y)" for="VPSDKCtrl">-->
	<script language="javascript" type="text/javascript" event="FireOnResponserNotify(x , y)" for="VPSDKCtrl">
		//alert(1);
		var str = res.GetResponserResult().GetConfigValueByKey("PickPointList");
		alert(str);
	
	</script>
	
    <script language="javascript" type="text/javascript">

        var obj;
        var map;
        var tools;
        function InitScene() {
            obj = document.getElementById("VPSDKCtrl");
            map = obj.GetIMapMgrPtr();
			var ret = obj.InitLic("192.168.1.50@8088@");
            tools = obj.GetIToolsCOMPtr();
			
			var tlo = map.CreateLayerOptions("domlayer"); 	// 创建dom图层，给配置起个名称，任意名称
            tlo.AddConfig("LayerOptionsName", "ImageLayerOptions"); // 创建配置类型, ImageLayerOptions代表影像数据配置，必须是此键值对
            tlo.AddConfig("DataSourceTypeName", "mtds"); // 数据源类型,代表MTDS插件，必须是此键值对
            tlo.AddConfig("Driver", "terrainquadtree"); // 代表地形驱动，必须是此键值对

            //////////////以下部分可以通过图层信息获取获得相应的配置////////////
            tlo.AddConfig("Url", "http://192.168.1.50:8088/files/HZDOM/"); /////要加载的数据路径，此数据必须是通过MTD切割工具生成的数据，并且进行了网络发布
            tlo.AddConfig("Format", "png"); ///////切割形成的数据格式
            tlo.AddConfig("Srs", "EPSG:4326"); /////数据的坐标参考
            tlo.AddConfig("MaxX", " 120.714010586176"); /////数据的范围X向最大值
            tlo.AddConfig("MinX", " 118.339686018686"); /////数据的范围X向最小值
            tlo.AddConfig("MaxY", " 30.5651224875501"); ////数据的范围Y向最大值
            tlo.AddConfig("MinY", " 29.188584444612"); /////数据的范围Y向最小值
            tlo.AddConfig("TileSize", "256"); /////切割数据的瓦片大小，可以往小于256的方向设置，但绝对不能往大于256的方向设置，但最好用切割的大小设置，否则会影响效率
            tlo.AddConfig("MinLevel", "0"); /////数据显示的最小层级
            tlo.AddConfig("MaxLevel", "16"); /////数据显示的最大层级

            mtdsdomlayer = map.CreateLayer("ImageLayer", tlo); ////创建DEM图层，第一项参数必须为ImageLayer
            map.AddLayer(mtdsdomlayer); ///添加DOM图层
        }

		var viewPointLayer;
        function CreateViewPointLayer() {
            var tlo = map.CreateLayerOptions("ViewPointLayer");

            tlo.AddConfig("LayerOptionsName", "ViewPointLayerOptions"); // 创建配置类型, ModelLayerOptions代表模型数据配置，必须是此键值对
            //tlo.AddConfig("DataSourceTypeName", "cpm");               // 数据源类型,代表CPM插件，必须是此键值对
            tlo.AddConfig("Auto", 1);                                   // 以当前视点作为定位数据，若为0需要手动指定数据
         
            /**
             * @brief 以下注释代码，为手动设置视点图层数据，即Auto设置为0时，手动录入参数
             *
             * tlo.AddConfig("Pitch",mPitch);        俯仰角设置
             * tlo.AddConfig("Azimuth", mAzimuth);   方位角设置
			 * tlo.AddConfig("Range", mRange);       距离设置
			 * tlo.AddConfig("WorldPos", "x,y,z");   视点设置
             * tlo.AddConfig("ImageUrl", mImageUrl); 图片设置，暂未用到
             * 
             */  
              
            viewPointLayer = map.CreateLayer("ViewPointLayer", tlo);
            map.AddLayer(viewPointLayer);

        }

        //序列化视点图层
        function SerialViewPointLayer() {

            if (viewPointLayer != null) {

                viewPointLayer.SerializeLayer("D:\\ViewPoint.xml");
            }
        }
        function LocateViewPointLayer() {

            if ( viewPointLayer != null ) {

                viewPointLayer.Locate();  /**<定位视点图层*/
            }
        }

        function DeserialViewPointLayer(){
            viewPointLayer = map.DeserializeLayer("D:\\ViewPoint.xml");
			viewPointLayer.Locate();
        }

        //加载图层
        var parseLayerTool = null;
        function LoadLayer() {

            if ( null != parseLayerTool ) {

                alert("Repeat Load The Same Layer!!!");
                return;
            }

            if (null != tools) {

                var tlo = tools.CreateToolsOptions("ToolsOption");      //配置对象类名不可任意更改
                if (null != tlo) {

                   // tlo.AddConfig("Url", "192.168.1.34");       //ip
				    tlo.AddConfig("Url", "192.168.1.34");       //ip
                   // tlo.AddConfig("Port", "9093");                 //端口
				    tlo.AddConfig("Port", "9095");                 //端口
                    tlo.AddConfig("Type", "gms");                //服务类型
                    tlo.AddConfig("Name", "admin");              //用户名  
                    tlo.AddConfig("Password", "admin");          //密码
                    //tlo.AddConfig("ServerName", "hz");    //服务名
					tlo.AddConfig("ServerName", "ModelTest");    //服务名
                    parseLayerTool = tools.CreateToolsObject("ParseModelWebData", tlo); //加载对象类名，不可任意更改
                    if (null != parseLayerTool) {

                        var res = tools.ActiveTools(parseLayerTool);     //激活工具对象
                        //res = tools.DestoryTools(parseLayerTool);        //销毁工具对象
                    }
                }

            } else {
                alert("null tools invalid handle");
            }

        }
		
		var LayerMap = new Array();
		//获取图层组下的子图层组和图层信息
		function GetAllLayerGroup( group )
		{
			var GroupCount = group.GetLayerGroupCount();
			//获取子图层组信息
			for(var i = 0; i < GroupCount; ++i )
			{
				var groupObj = map.GetLayerGroupChildByIndex(group, i);
				GetAllLayerGroup(groupObj);
			}
			//获取图层信息
			GetAllLayer(group);
		}
		//获取图层组下的图层信息
		function GetAllLayer( group )
		{
			var LayerCount = group.GetLayerCount();
			for(var i = 0; i < LayerCount; ++i )
			{
				var groupObj = group.GetLayerByIndex(i);
				var name = GetLyerName(groupObj);
				if( name != "" )
				{
					LayerMap[name] = groupObj;
				}
			}
		}
		//获取图层名
		function GetLyerName( layer )
		{
			var opt = layer.GetLayerOption();
			return opt.GetConfigValueByKey("Name");
		}
		
		//获取图层图层组信息
        function GetMap()
		{
			var groupcount = map.GetLayerGroupCount();
			var layercount = map.GetLayerCount();
			//获取图层组
			for(var i = 0; i < groupcount ; ++i)
			{
				var groupObj = map.GetLayerGroupByIndex(i);
				GetAllLayerGroup(groupObj);
			}
			//获取图层
			for(var i = 0; i < layercount ; ++i)
			{
				var layerObj = map.GetLayerByIndex(i);
				var name = GetLyerName(layerObj);
				if(name != "")
				{
					LayerMap[name] = layerObj;
				}
			}
			LayerMap["101011"].Locate();
        }

    </script>
</head>
<body onload="InitScene()">
    <input id="Button1" type="button" value="创建视点图层" onclick="CreateViewPointLayer()" />
	<input id="Button2" type="button" value="序列化视点图层" onclick="SerialViewPointLayer()" />
    <input id="Button3" type="button" value="定位视点图层" onclick="LocateViewPointLayer()" />
	<input id="Button4" type="button" value="反序列花图层" onclick="DeserialViewPointLayer()" />
    <input id="Button5" type="button" value="加载图层组" onclick="LoadLayer()" />
	<input id="Button6" type="button" value="获取所有图层" onclick="GetMap()" />
	
    <object id="VPSDKCtrl" classid="CLSID:A1F1748A-2B6E-4616-954D-3F39B11DF57D" style="width: 100%; height: 980px">
    </object>
</body>
</html>
