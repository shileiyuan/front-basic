<html>
<head>
    <meta name="GENERATOR" content="Microsoft Visual Studio 8.0">
    <title>同一帧添加多更新操作</title>
    <script language="javascript" type="text/javascript">

        var MouseX = "";
        var MouseY = "";
        /**
         @brief 鼠标左键触发事件
         @param [in] x 鼠标点击位置x轴坐标
         @param [in] y 鼠标点击位置y轴坐标
        */
        function LButtonDown(x, y)
        {

            MouseX = x;
            MouseY = y;
            //window.alert("X: " + MouseX + "Y: " + MouseY);
        }
          /**
         @brief 操作事件
         @param [in] type   操作类型
         @param [in] result 操作结果
        */
        function FireOnOperationNotify(type, result)
        {
            window.alert( "ViewPoint: " + " type: " + type + " result: " + result ); 
        }

  
        var obj;
        var map;

        function InitScene() {
            obj = document.getElementById("VPSDKCtrl");
            obj.attachEvent("FireOnLButtonDown", LButtonDown);
            obj.attachEvent("FireOnOperationNotify", FireOnOperationNotify);

            map = obj.GetIMapMgrPtr();
			var ret = obj.InitLic("192.168.1.50@8088@");
        }

 

        var gmsLayer;
        //////加载模型数据
        function LoadGMS() {

            var tlo = map.CreateLayerOptions("HaiKang2_Compressed"); //给配置起个名称，必须和配置项Name的值一致    
            tlo.AddConfig("LayerOptionsName", "ModelLayerOptions"); // 创建配置类型, ModelLayerOptions代表模型数据配置，必须是此键值对
            tlo.AddConfig("Name", "HaiKang2_Compressed"); /////图层数据名称
            tlo.AddConfig("DataSourceTypeName", "gms"); // 数据源类型,代表GMS插件，必须是此键值对
            tlo.AddConfig("Url", "http://192.168.1.50:8080/files/"); /////要加载的数据路径，此数据需为GMS数据，只支持压缩数据
            gmsLayer = map.CreateLayer("ModelLayer", tlo); ////创建模型图层，第一项参数必须为ModelLayer
            map.AddLayer(gmsLayer); ///添加模型图层
            gmsLayer.Locate(); ////模型图层定位
        }

        ////删除模型数据
        function RemoveGMS() 
        {
            map.RemoveLayer(gmsLayer); ////删除模型数据
        }

  
	    var id0;
	    var operatonPtr0;

	    var id1;
	    var operationPtr1;

	    function CreateMultiOperation() {

	        if ( null != multiOperationPtr ) {

	            alert("Repeating Create Operation!");
	            return;
            }
	        var tlo = map.CreateOperationOptions("Camera");                  //创建配置类型,操作类型的配置
	        tlo.AddConfig("OptionsTypeName", "CameraOptions");               //相机配置项       
	        tlo.AddConfig("Operation", "SkyBoxImgPath");                     //添加操作类型
	        tlo.AddConfig("SkyBoxImgPath", "C:/Users/hsy/Desktop/Skybox/");  //设置天空盒和路径
	        operationPtr0 = map.CreateOperation("CameraOperation", tlo);     //根据配置创建模型调整操作
	        id0 = operationPtr0.GetOperationGUID();                          //获取操作id

	        var mlo = map.CreateOperationOptions("Camera");                  //创建配置类型,操作类型的配置
	        mlo.AddConfig("OptionsTypeName", "CameraOptions");               //相机配置项       
	        mlo.AddConfig("Operation", "Fovy");                              //添加操作类型
	        mlo.AddConfig("Fovy", "90");                                     //设置透视角
	        operationPtr1 = map.CreateOperation("CameraOperation", mlo);     //根据配置创建模型调整操作
	        id1 = operationPtr1.GetOperationGUID();                          //获取操作id
       }


	    var multiOperationPtr;
	    function CreateMultiOperationsOneFrame() 
        {

	        CreateMultiOperation();
	        var tlo = map.CreateOperationOptions("Camera");                          //创建配置类型,操作类型的配置
	        tlo.AddConfig("OptionsTypeName", "MultiOperationOptions");               //创建图层配置项
	        tlo.AddConfig("Operations", "AddOperations");                            //添加操作选项
	        tlo.AddConfig("Holdings","1,1");                                         //添加操作驻留标志，1，驻留 0,不驻留，若不设置，默认不驻留，标志数要与操作数相同
	        tlo.AddConfig("OperationIds", ""+ id0 + "," + id1);                      //操作id列表 

	        multiOperationPtr = map.CreateOperation("MultiOperationOneFrame", tlo);  //根据配置创建模型调整操作
	        map.AddOperation(multiOperationPtr);                                     //加入操作并执行
        }


        var fovy = 55;
        function UpdateOneOperation() {

            if ( null != multiOperationPtr ) {

                fovy = 90 - fovy;
                var tlo = map.CreateOperationOptions("Camera");                          //创建配置类型,操作类型的配置
                tlo.AddConfig("OptionsTypeName", "MultiOperationOptions");               //创建图层配置项
                tlo.AddConfig("OperationIds", "" + id0);                                 //操作id列表 
                tlo.AddConfig("Operation", " Fovy");                                     //添加操作类型
                tlo.AddConfig("Fovy", fovy);                                             //设置近平面距离

                multiOperationPtr.UpdateOperationOptions(tlo);                           //根据操作id更新响应操作
            }
          
        }

        function RemoveMultieOperation() 
        {
            if ( null != multiOperationPtr ) {
                map.RemoveOperation(multiOperationPtr);                           //移除操作
                multiOperationPtr = null;
            }
        }



    </script>
</head>
<body onload="InitScene()"> 
  
    <input id="Button17" type="button" value="加载(GMS)" onclick="LoadGMS()" />
    <input id="Button18" type="button" value="卸载(GMS)" onclick="RemoveGMS()" />

    <input id = "Button20" type = "button" value = "同一帧添加多操作"   onclick = "CreateMultiOperationsOneFrame()" />
    <input id = "Button1"  type = "button" value = "根据id更新操作"     onclick = "UpdateOneOperation()" />
    <input id = "Button21" type = "button" value = "移除多操作"         onclick = "RemoveMultieOperation()"/>
    
    <object id="VPSDKCtrl" classid="CLSID:A1F1748A-2B6E-4616-954D-3F39B11DF57D" style="width: 100%;height: 100%">
    </object>
</body>
</html>
